{"ast":null,"code":"import _objectSpread from \"/Users/jon/Desktop/Projects/Noteful_JG/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jon/Desktop/Projects/Noteful_JG/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jon/Desktop/Projects/Noteful_JG/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jon/Desktop/Projects/Noteful_JG/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jon/Desktop/Projects/Noteful_JG/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jon/Desktop/Projects/Noteful_JG/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jon/Desktop/Projects/Noteful_JG/src/AddNote/AddNote.js\";\nimport React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport ApiContext from '../ApiContext';\nimport config from '../config';\nimport PropTypes from 'prop-types';\nimport ValidationError from '../ValidationError';\n\nvar AddNote =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddNote, _Component);\n\n  function AddNote(props) {\n    var _this;\n\n    _classCallCheck(this, AddNote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddNote).call(this, props));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var newNote = {\n        name: e.target['note-name'].value,\n        content: e.target['note-content'].value,\n        folderId: e.target['note-folder-id'].value,\n        modified: new Date()\n      };\n      fetch(\"\".concat(config.API_ENDPOINT, \"/notes\"), {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(newNote)\n      }).then(function (res) {\n        if (!res.ok) return res.json().then(function (e) {\n          return Promise.reject(e);\n        });\n        return res.json();\n      }).then(function (note) {\n        _this.context.addNote(note);\n\n        _this.props.history.push(\"/folder/\".concat(note.folderId));\n      }).catch(function (error) {\n        console.error({\n          error: error\n        });\n      });\n    };\n\n    _this.state = {\n      noteName: '',\n      noteContent: '',\n      noteFolder: '',\n      noteNameValid: false,\n      noteContentValid: false,\n      noteFolderValid: false,\n      formValid: false,\n      validationMessages: {\n        noteTitle: '',\n        noteContent: '',\n        noteFolder: ''\n      }\n    };\n    return _this;\n  }\n\n  _createClass(AddNote, [{\n    key: \"updateNoteName\",\n    value: function updateNoteName(noteName) {\n      var _this2 = this;\n\n      this.setState({\n        noteName: noteName\n      }, function () {\n        _this2.validateNoteName(noteName);\n      });\n    }\n  }, {\n    key: \"updateNoteContent\",\n    value: function updateNoteContent(noteContent) {\n      var _this3 = this;\n\n      this.setState({\n        noteContent: noteContent\n      }, function () {\n        _this3.validateNoteText(noteContent);\n      });\n    }\n  }, {\n    key: \"updateNoteFolder\",\n    value: function updateNoteFolder(noteFolder) {\n      var _this4 = this;\n\n      this.setState({\n        noteFolder: noteFolder\n      }, function () {\n        _this4.validateNoteFolder(noteFolder);\n      });\n    }\n  }, {\n    key: \"validateNoteName\",\n    value: function validateNoteName(fieldValue) {\n      var fieldErrors = _objectSpread({}, this.state.validationMessages);\n\n      var hasError = false;\n      fieldValue = fieldValue.trim();\n\n      if (fieldValue.length === 0) {\n        fieldErrors.noteTitle = 'Please type a note title';\n        hasError = true;\n      }\n\n      this.setState({\n        validationMessages: fieldErrors,\n        noteNameValid: !hasError\n      }, this.formValid);\n    }\n  }, {\n    key: \"validateNoteText\",\n    value: function validateNoteText(fieldValue) {\n      var fieldErrors = _objectSpread({}, this.state.validationMessages);\n\n      var hasError = false;\n      fieldValue = fieldValue.trim();\n\n      if (fieldValue.length === 0) {\n        fieldErrors.noteContent = 'Please type some note text';\n        hasError = true;\n      }\n\n      this.setState({\n        validationMessages: fieldErrors,\n        noteContentValid: !hasError\n      }, this.formValid);\n    }\n  }, {\n    key: \"validateNoteFolder\",\n    value: function validateNoteFolder(fieldValue) {\n      var fieldErrors = _objectSpread({}, this.state.validationMessages);\n\n      var hasError = false;\n\n      if (fieldValue === \"empty\") {\n        fieldErrors.noteFolder = 'Please select a folder';\n        hasError = true;\n      }\n\n      this.setState({\n        validationMessages: fieldErrors,\n        noteFolderValid: !hasError\n      }, this.formValid);\n    }\n  }, {\n    key: \"formValid\",\n    value: function formValid() {\n      this.setState({\n        formValid: this.state.noteNameValid && this.state.noteContentValid && this.state.noteFolderValid\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$context$folders = this.context.folders,\n          folders = _this$context$folders === void 0 ? [] : _this$context$folders;\n      return React.createElement(\"section\", {\n        className: \"AddNote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Create a note\"), React.createElement(NotefulForm, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-name-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"note-name-input\",\n        name: \"note-name\",\n        onChange: function onChange(e) {\n          return _this5.updateNoteName(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(ValidationError, {\n        hasError: !this.state.noteNameValid,\n        message: this.state.validationMessages.noteTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-content-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Content\"), React.createElement(\"textarea\", {\n        id: \"note-content-input\",\n        name: \"note-content\",\n        onChange: function onChange(e) {\n          return _this5.updateNoteContent(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(ValidationError, {\n        hasError: !this.state.noteContentValid,\n        message: this.state.validationMessages.noteContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-folder-select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Folder\"), React.createElement(\"select\", {\n        id: \"note-folder-select\",\n        name: \"note-folder-id\",\n        onChange: function onChange(e) {\n          return _this5.updateNoteFolder(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"...\"), folders.map(function (folder) {\n        return React.createElement(\"option\", {\n          key: folder.id,\n          value: folder.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, folder.name);\n      })), React.createElement(ValidationError, {\n        hasError: !this.state.noteFolderValid,\n        message: this.state.validationMessages.noteFolder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        disabled: !this.state.formValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Add note\"))));\n    }\n  }]);\n\n  return AddNote;\n}(Component);\n\nAddNote.defaultProps = {\n  history: {\n    push: function push() {}\n  }\n};\nAddNote.contextType = ApiContext;\nexport { AddNote as default };\nAddNote.propTypes = {\n  handleSubmit: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  })\n};","map":{"version":3,"sources":["/Users/jon/Desktop/Projects/Noteful_JG/src/AddNote/AddNote.js"],"names":["React","Component","NotefulForm","ApiContext","config","PropTypes","ValidationError","AddNote","props","handleSubmit","e","preventDefault","newNote","name","target","value","content","folderId","modified","Date","fetch","API_ENDPOINT","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","note","context","addNote","history","push","catch","error","console","state","noteName","noteContent","noteFolder","noteNameValid","noteContentValid","noteFolderValid","formValid","validationMessages","noteTitle","setState","validateNoteName","validateNoteText","validateNoteFolder","fieldValue","fieldErrors","hasError","trim","length","folders","updateNoteName","updateNoteContent","updateNoteFolder","map","folder","id","defaultProps","contextType","propTypes","func","shape"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport NotefulForm from '../NotefulForm/NotefulForm'\nimport ApiContext from '../ApiContext'\nimport config from '../config'\nimport PropTypes from 'prop-types';\nimport ValidationError from '../ValidationError'\n\n\nexport default class AddNote extends Component {\n  static defaultProps = {\n    history: {\n      push: () => { }\n    },\n  }\n  static contextType = ApiContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteName: '',\n      noteContent: '',\n      noteFolder: '',\n      noteNameValid: false,\n      noteContentValid: false,\n      noteFolderValid: false,\n      formValid: false,\n      validationMessages: {\n        noteTitle: '',\n        noteContent: '',\n        noteFolder: ''\n      }\n    }\n  }  \n\n  updateNoteName(noteName) {\n    this.setState({noteName}, () => {this.validateNoteName(noteName)});\n  }\n\n  updateNoteContent(noteContent) {\n    this.setState({noteContent}, () => {this.validateNoteText(noteContent)});\n  }\n  \n  updateNoteFolder(noteFolder) {\n    this.setState({noteFolder}, () => {this.validateNoteFolder(noteFolder)});\n  }\n\n  validateNoteName(fieldValue) {\n    const fieldErrors = {...this.state.validationMessages};\n    let hasError = false;\n\n    fieldValue = fieldValue.trim();\n    if(fieldValue.length === 0) {\n      fieldErrors.noteTitle = 'Please type a note title';\n      hasError = true;\n    }\n\n    this.setState({\n      validationMessages: fieldErrors,\n      noteNameValid: !hasError\n    }, this.formValid );\n  }\n\n  validateNoteText(fieldValue) {\n    const fieldErrors = {...this.state.validationMessages};\n    let hasError = false;\n\n    fieldValue = fieldValue.trim();\n    if(fieldValue.length === 0) {\n      fieldErrors.noteContent = 'Please type some note text';\n      hasError = true;\n    }\n\n    this.setState({\n      validationMessages: fieldErrors,\n      noteContentValid: !hasError\n    }, this.formValid );\n  }\n\n  validateNoteFolder(fieldValue) {\n    const fieldErrors = {...this.state.validationMessages};\n    let hasError = false;\n\n    if(fieldValue === \"empty\") {\n      fieldErrors.noteFolder = 'Please select a folder';\n      hasError = true;\n    }\n\n    this.setState({\n      validationMessages: fieldErrors,\n      noteFolderValid: !hasError\n    }, this.formValid );\n  }\n\n  formValid() {\n    this.setState({\n      formValid: this.state.noteNameValid && this.state.noteContentValid && this.state.noteFolderValid\n    });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    const newNote = {\n      name: e.target['note-name'].value,\n      content: e.target['note-content'].value,\n      folderId: e.target['note-folder-id'].value,\n      modified: new Date(),\n    }\n    fetch(`${config.API_ENDPOINT}/notes`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(newNote),\n    })\n      .then(res => {\n        if (!res.ok)\n          return res.json().then(e => Promise.reject(e))\n        return res.json()\n      })\n      .then(note => {\n        this.context.addNote(note)\n        this.props.history.push(`/folder/${note.folderId}`)\n      })\n      .catch(error => {\n        console.error({ error })\n      })\n  }\n\n  render() {\n    const { folders=[] } = this.context\n    \n    return (\n      <section className='AddNote'>\n        <h2>Create a note</h2>\n          <NotefulForm onSubmit={this.handleSubmit}>\n            <div className='field'>\n              <label htmlFor='note-name-input'>\n                Name\n              </label>\n              <input type='text' id='note-name-input' name='note-name' onChange={e => this.updateNoteName(e.target.value)} />\n              <ValidationError hasError={!this.state.noteNameValid} message={this.state.validationMessages.noteTitle}/>\n            </div>\n            <div className='field'>\n              <label htmlFor='note-content-input'>\n                Content\n              </label>\n              <textarea id='note-content-input' name='note-content' onChange={e => this.updateNoteContent(e.target.value)} />\n              <ValidationError hasError={!this.state.noteContentValid} message={this.state.validationMessages.noteContent}/>  \n            </div>\n            <div className='field'>\n              <label htmlFor='note-folder-select'>\n                Folder\n              </label>\n              <select id='note-folder-select' name='note-folder-id' onChange={e => this.updateNoteFolder(e.target.value)}>\n                <option value=\"empty\">...</option>\n                {folders.map(folder =>\n                  <option key={folder.id} value={folder.id}>\n                    {folder.name}\n                  </option>\n                )}\n              </select>\n              <ValidationError hasError={!this.state.noteFolderValid} message={this.state.validationMessages.noteFolder}/>  \n            </div>\n            <div className='buttons'>\n              <button type='submit' disabled={!this.state.formValid}>\n                Add note\n              </button>\n            </div>\n          </NotefulForm>\n      </section>\n    )\n  }\n\n}\n\nAddNote.propTypes = {\n    handleSubmit: PropTypes.func,\n    history: PropTypes.shape({\n      push: PropTypes.func,\n    })\n};"]},"metadata":{},"sourceType":"module"}